generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid()) // PostgreSQL uses UUID for ID generation
  email    String    @unique
  files    File[]
  messages Message[]

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @default(uuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  userId String?
}

model Message {
  id            String  @id @default(uuid()) // UUID for PostgreSQL
  text          String  @db.Text() // Use `Text` for long strings in PostgreSQL
  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String? // Optional relation to User

  file   File?   @relation(fields: [fileId], references: [id])
  fileId String? // Optional relation to File
}
